name: chocolatine
on:
  push:
    branches-ignore:
      - ga-ignore-*
  pull_request:
    branches-ignore:
      - ga-ignore-*

env:
  MIRROR_URL: "git@github.com:godlynjr/Minishell_2.git"
  EXECUTABLES: "guess"


jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
      - run: check.sh $(pwd) $(pwd)
      - run: |
          while read -r line; do
            filename=$(echo "$line" | cut -d':' -f1)
            line_number=$(echo "$line" | cut -d':' -f2)
            error_type=$(echo "$line" | cut -d':' -f3)
            error_code=$(echo "$line" | cut -d':' -f4)
            echo "::error file=${filename##*/},line=$line_number,endLine=$line_number,title=$error_type coding style error,::$error_code"
            done < coding-style-reports.log

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: [check_coding_style]
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v3
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Build the code
        run: make
      - name: Clean the code
        run: make clean
      - name: Check for executables
        run: |
          for exe in $(echo $EXECUTABLES | tr "," "\n"); do
            if [ ! -x $exe ]; then
              echo "Error: $exe not found or not executable"
              exit 1
            fi
           done


  run_tests:
    runs-on: ubuntu-latest
    needs: [check_program_compilation]
    container: epitechcontent/epitest-docker
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v3
      - run: make tests_run


  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [run_tests]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1.0.1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}